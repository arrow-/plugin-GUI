# Automatically generated makefile, created by the Introjucer
# Don't edit this file! Your changes will be overwritten when you re-save the Introjucer project!

# (this disables dependency generation if multiple architectures are set)
DEPFLAGS := $(if $(word 2, $(TARGET_ARCH)), , -MMD)

SUB_PLUGIN_DIR := ../../Source/Plugins/CyclopsStimulator/plugins

OE_CL_INCLUDES := -I $(CURDIR)/../../Source/Plugins/CyclopsStimulator/CyclopsAPI -I $(CURDIR)/../../Source/Plugins/CyclopsStimulator/plugin_manager
JUCE_INCLUDES := -I $(CURDIR)/../../JuceLibraryCode -I $(CURDIR)/../../JuceLibraryCode/modules -I $(CURDIR)/../../Source/Plugins/Headers

ifndef CONFIG
	CONFIG=Debug
endif

BINDIR := $(CURDIR)/build
LIBDIR := $(CURDIR)/build
OUTDIR := $(CURDIR)/build/cyclops_plugins
TEMPLATE_SRC_DIR := $(SUB_PLUGIN_DIR)/../code_gen
TEMPLATE_OUT_DIR := $(OUTDIR)/code_gen_templates
DEVICE_DIR := $(CURDIR)/build/intermediate/device

PYFILE := ../../Resources/Python/cyclops/configure.py
PYTHON_CMD := @python3 $(PYFILE) $(OUTDIR)

ifeq ($(OS),Windows_NT)
	DEP_INSTALL := @true
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		DEP_INSTALL := sudo apt-get install libusb-dev
	endif
endif

ifeq ($(wildcard $(DEVICE_DIR)/teensy_loader_cli/.git),)
	GIT_CMD := @git clone https://github.com/PaulStoffregen/teensy_loader_cli.git $(DEVICE_DIR)/teensy_loader_cli; echo "\nInstalling dependencies (libusb-dev)..."; $(DEP_INSTALL);
	GIT_MSG := @echo "Fetching Teensy CLI Loader..."
else
	GIT_CMD := @cd $(DEVICE_DIR)/teensy_loader_cli; git pull origin master;
	GIT_MSG := @echo "Updating Teensy CLI Loader..."
endif

unexport CFLAGS

ifeq ($(CONFIG),Debug)
	OBJDIR := $(CURDIR)/build/intermediate/cyclops_plugins/Debug

	ifeq ($(TARGET_ARCH),)
	TARGET_ARCH := -march=native
	endif

	CPPFLAGS := $(DEPFLAGS) -D "LINUX=1" -D "DEBUG=1" -D "_DEBUG=1" -D "OE_CL_PLUGIN" -D "JUCER_LINUX_MAKE_7346DA2A=1" -D "JUCE_APP_VERSION=0.3.5" -D "JUCE_APP_VERSION_HEX=0x305" -I /usr/include -I /usr/include/freetype2
	CPPFLAGS += $(JUCE_INCLUDES) $(OE_CL_INCLUDES)
	CFLAGS += $(CPPFLAGS) $(TARGET_ARCH) -g -ggdb -O3 -std=c++11 -fPIC -rdynamic
	CXXFLAGS += $(CFLAGS)
	LDFLAGS += $(TARGET_ARCH) -L$(BINDIR) -L$(LIBDIR) -L/usr/X11R6/lib/ -L/usr/local/include -lGL -lX11 -lXext -lXinerama -lasound -ldl -lfreetype -lpthread -lrt -ldl -lXext -lGLU -fPIC -rdynamic
	LDDEPS :=
	RESFLAGS :=  -D "LINUX=1" -D "DEBUG=1" -D "_DEBUG=1" -D "OE_CL_PLUGIN" -D "JUCER_LINUX_MAKE_7346DA2A=1" -D "JUCE_APP_VERSION=0.3.5" -D "JUCE_APP_VERSION_HEX=0x305" -I /usr/include -I /usr/include/freetype2 $(JUCE_INCLUDES)
	CLEANCMD = rm -rf $(OUTDIR)/* $(OBJDIR) $(DEVICE_DIR)
endif

ifeq ($(CONFIG),Release)
	OBJDIR := $(CURDIR)/build/intermediate/cyclops_plugins/Release

	ifeq ($(TARGET_ARCH),)
	TARGET_ARCH := -march=native
	endif

	CPPFLAGS := $(DEPFLAGS) -D "LINUX=1" -D "NDEBUG=1" -D "OE_CL_PLUGIN" -D "JUCER_LINUX_MAKE_7346DA2A=1" -D "JUCE_APP_VERSION=0.3.5" -D "JUCE_APP_VERSION_HEX=0x305" -I /usr/include -I /usr/include/freetype2
	CPPFLAGS += $(JUCE_INCLUDES) $(OE_CL_INCLUDES)
	CFLAGS += $(CPPFLAGS) $(TARGET_ARCH) -O3 -std=c++11 -fPIC -rdynamic
	CXXFLAGS += $(CFLAGS)
	LDFLAGS += $(TARGET_ARCH) -L$(BINDIR) -L$(LIBDIR) -fvisibility=hidden -L/usr/X11R6/lib/ -lGL -lX11 -lXext -lXinerama -lasound -ldl -lfreetype -lpthread -lrt -pg -ldl -lXext -lGLU -fPIC -rdynamic
	LDDEPS1 :=
	RESFLAGS :=  -D "LINUX=1" -D "NDEBUG=1" -D "OE_CL_PLUGIN" -D "JUCER_LINUX_MAKE_7346DA2A=1" -D "JUCE_APP_VERSION=0.3.5" -D "JUCE_APP_VERSION_HEX=0x305" -I /usr/include -I /usr/include/freetype2 $(JUCE_INCLUDES)
	CLEANCMD = rm -rf $(OUTDIR)/* $(OBJDIR)
endif

export

SUBDIRS := $(wildcard $(SUB_PLUGIN_DIR)/*)

.PHONY: clean all notify $(SUBDIRS)

all: notify configure $(SUBDIRS)

notify:
	@echo "\n~~~~~~~        Building Open-Ephys -- Cyclops Plugins     ~~~~~~~"
	-@mkdir -p $(OUTDIR)
	@echo "Updating and preparing the Signal Database [from plugins/signals.yaml]"
	-@cp $(SUB_PLUGIN_DIR)/signals.yaml $(OUTDIR)
	@echo "Updating the Code Generation templates [from code_gen/*.json]"
	-@mkdir $(OUTDIR)/code_gen_templates
	-@cp $(TEMPLATE_SRC_DIR)/*.json $(TEMPLATE_OUT_DIR)

configure:
	@echo
	$(GIT_MSG)
	$(GIT_CMD)
	@echo
	@$(MAKE) -C $(DEVICE_DIR)/teensy_loader_cli
	@echo
	$(PYTHON_CMD)
	@echo
	-@mkdir -p $(DEVICE_DIR)
	
$(SUBDIRS):
	@if [ -f $@/Makefile ]; then $(MAKE) -C $@ ; fi

%::
	@if [ -f $(SUB_PLUGIN_DIR)/$@/Makefile ]; then $(MAKE) -C $(SUB_PLUGIN_DIR)/$@ ; fi
# @if [ -f $(SUB_PLUGIN_DIR)/$@/Makefile ]; then $(MAKE) -C $(SUB_PLUGIN_DIR)/$@ ; $(MAKE) -C $(SUB_PLUGIN_DIR)/$@ clean ; fi

	
clean:
	@echo Cleaning open-ephys -- cyclops plugins
	@$(CLEANCMD)
