"
# The teensy version to use, 30, 31, or LC
TEENSY := 31

# Set to 24000000, 48000000, or 96000000 to set CPU core speed
TEENSY_CORE_SPEED := 96000000

# Some libraries will require this to be defined
# If you define this, you will break the default main.cpp
ARDUINO := 10611

# configurable options
OPTIONS := -DUSB_SERIAL -DLAYOUT_US_ENGLISH

# directory to build in
BUILDDIR := $(CURDIR)/build)

#************************************************************************
# Location of Teensyduino utilities, Toolchain, and Arduino Libraries.
# To use this makefile without Arduino, copy the resources from these
# locations and edit the pathnames.  The rest of Arduino is not needed.
#************************************************************************

# path location for Teensy Loader, teensy_post_compile and teensy_reboot
TOOLSPATH := $(ARDUINOPATH)/hardware/tools
# path location for teensy_loader_cli
TEENSY_CLI_PATH := teensy_loader_cli

ifeq ($(OS),Windows_NT)
\t$(error What is Win Dose?)
else
\tUNAME_S = $(shell uname -s)
\tifeq ($(UNAME_S),Darwin)
\t\tTOOLSPATH = /Applications/Arduino.app/Contents/Java/hardware/tools/
\tendif
endif

# path location for Teensy 3 core
ifeq ($(TEENSY),30)
\tCOREPATH = $(ARDUINOPATH)/hardware/teensy/avr/cores/teensy
else
\tCOREPATH = $(ARDUINOPATH)/hardware/teensy/avr/cores/teensy3
endif

# path location for the arm-none-eabi compiler
COMPILERPATH := $(TOOLSPATH)/arm/bin

#************************************************************************
# Settings below this point usually do not need to be edited
#************************************************************************

# CPPFLAGS = compiler options for C and C++
CPPFLAGS := -Wall -g -Os -mthumb -ffunction-sections -fdata-sections -nostdlib -MMD $(OPTIONS) -DTEENSYDUINO=130 -DF_CPU=$(TEENSY_CORE_SPEED) -Isrc -I$(COREPATH)

# compiler options for C++ only
CXXFLAGS := -std=gnu++0x -felide-constructors -fno-exceptions -fno-rtti

# compiler options for C only
CFLAGS :=

# linker options
LDFLAGS := -Os -Wl,--gc-sections,--defsym=__rtc_localtime=0 --specs=nano.specs -mthumb

# additional libraries to link
LIBS := -lm

# compiler options specific to teensy version
ifeq ($(TEENSY), 30)
\tCPPFLAGS += -D__MK20DX128__ -mcpu=cortex-m4
\tMCU = mk20dx128
\tLDSCRIPT = $(COREPATH)/$(MCU).ld
\tLDFLAGS += -mcpu=cortex-m4 -T$(LDSCRIPT)
else
\tifeq ($(TEENSY), 31)
\t\tCPPFLAGS += -D__MK20DX256__ -mcpu=cortex-m4
\t\tMCU = mk20dx256
\t\tLDSCRIPT = $(COREPATH)/$(MCU).ld
\t\tLDFLAGS += -mcpu=cortex-m4 -T$(LDSCRIPT)
\telse
\t\tifeq ($(TEENSY), LC)
\t\t\tCPPFLAGS += -D__MKL26Z64__ -mcpu=cortex-m0plus
\t\t\tMCU = mkl26z64
\t\t\tLDSCRIPT = $(COREPATH)/$(MCU).ld
\t\t\tLDFLAGS += -mcpu=cortex-m0plus -T$(LDSCRIPT)
\t\t\tLIBS += -larm_cortexM0l_math
\t\telse
\t\t\t$(error Invalid setting for TEENSY)
\t\tendif
\tendif
endif

# set arduino define if given
ifdef ARDUINO
\tCPPFLAGS += -DARDUINO=$(ARDUINO)
else
\tCPPFLAGS += -DUSING_MAKEFILE
endif

# names for the compiler programs
CC := $(abspath $(COMPILERPATH))/arm-none-eabi-gcc
CXX := $(abspath $(COMPILERPATH))/arm-none-eabi-g++
OBJCOPY := $(abspath $(COMPILERPATH))/arm-none-eabi-objcopy
SIZE := $(abspath $(COMPILERPATH))/arm-none-eabi-size

# automatically create lists of the sources and objects
LC_FILES := $(wildcard $(ARDUINO_LIB_PATH)/*/*.c)
LCPP_FILES := $(wildcard $(ARDUINO_LIB_PATH)/*/*.cpp)
TC_FILES := $(wildcard $(COREPATH)/*.c)
TCPP_FILES := $(wildcard $(COREPATH)/*.cpp)
C_FILES := $(wildcard src/*.c)
CPP_FILES := $(wildcard src/*.cpp)
INO_FILES := $(wildcard src/*.ino)

# include paths for libraries
L_INC := $(foreach lib,$(filter %/, $(wildcard $(ARDUINO_LIB_PATH)/*/)), -I$(lib))

CL_SOURCES := $(C_FILES:.c=.o) $(CPP_FILES:.cpp=.o) $(INO_FILES:.ino=.o)
CORE_SOURCES := $(TC_FILES:.c=.o) $(TCPP_FILES:.cpp=.o)
LIB_SOURCES := $(LC_FILES:.c=.o) $(LCPP_FILES:.cpp=.o)

CL_OBJS := $(foreach src,$(CL_SOURCES), $(BUILDDIR)/$(src))
CORE_OBJS := $(foreach src,$(CORE_SOURCES), $(BUILDDIR)/$(src))
LIB_OBJS := $(foreach src,$(LIB_SOURCES), $(BUILDDIR)/$(src))
ALL_OBJS := $(CL_OBJS) $(CORE_OBJS) $(LIB_OBJS)

all: hex

build: $(TARGET).elf

hex: $(TARGET).hex

post_compile: $(TARGET).hex
\t@$(abspath $(TOOLSPATH))/teensy_post_compile -file=\"$(basename $<)\" -path=$(CURDIR) -tools=\"$(abspath $(TOOLSPATH))\"

reboot:
\t-@$(abspath $(TOOLSPATH))/teensy_reboot

upload_gui: post_compile reboot

upload:
\t@echo
\t$(TEENSY_CLI_PATH)/teensy_loader_cli -mmcu=$(MCU) $(TARGET).hex -s -v

$(BUILDDIR)/%.o: %.c
\t$(VECHO) \"[CC]\\t$<\"
\t@mkdir -p \"$(dir $@)\"
\t@$(CC) $(CPPFLAGS) $(CFLAGS) $(L_INC) -o \"$@\" -c \"$<\"

$(BUILDDIR)/%.o: %.cpp
\t$(VECHO) \"[CXX]\\t$<\"
\t@mkdir -p \"$(dir $@)\"
\t@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o \"$@\" -c \"$<\"

$(BUILDDIR)/%.o: %.ino
\t$(VECHO) \"[CXX]\\t$<\"
\t@mkdir -p \"$(dir $@)\"
\t@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o \"$@\" -x c++ -include Arduino.h -c \"$<\"

cyclops: $(CL_OBJS)
\t@echo \"cyclops DONE 0\"

cores: $(CORE_OBJS)
\t@echo \"teensy-$(TEENSY) core DONE 1\"

libs: $(LIB_OBJS)
\t@echo \"Arduino & CL libraries DONE 2\"

$(TARGET).elf: cyclops cores libs $(LDSCRIPT)
\t$(VECHO) \"[LD]\\t$@\"
\t@$(CC) $(LDFLAGS) -o \"$@\" $(ALL_OBJS) $(LIBS)

%.hex: %.elf
\t$(VECHO) \"[HEX]\\t$@\\n\"
\t@echo \"<SIZE>\"
\t@$(SIZE) \"$<\"
\t@$(OBJCOPY) -O ihex -R .eeprom \"$<\" \"$@\"
\t@echo \"<EZIS>\"
\t@echo \"HEX DONE 3\"

# compiler generated dependency info
-include $(OBJS:.o=.d)

clean:
\t@echo Cleaning...
\t@rm -rf \"$(BUILDDIR)\"
\t@rm -f \"$(TARGET).elf\" \"$(TARGET).hex\"

"