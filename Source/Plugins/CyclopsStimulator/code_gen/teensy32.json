{
    "sourceHeader": [
        "#ifndef CL_MY_SOURCES_H\n#define CL_MY_SOURCES_H\n//\n// This file contains the globals definitions of the Source objects. Just include\n// this file into your main `.ino` script, and you'll get access to the objects\n// here.\n\n",
        "/* You must register these sources with the library, by:\n *\n * 1. making a globally scoped array of pointers to the objects.\n * 2. assign the global array to the ``globalSourceList_ptr``\n *\n * Only the registered sources are guaranteed to work when using the RPC,\n * especially when using the OE GUI.\n */\n",
        "// Assigning this array to the special pointer.\n",
        "#endif\n"
    ],

    "setup": [
        "#include <Cyclops.h>\n#include \"CLTask.h\"\n#include \"MySources.h\"\n\n// Use the objects you've defined in MySources.h\n\n",
        "/*  \n * #####################################################################\n * #                        DONT EDIT BELOW THIS!                      #\n * #####################################################################\n */\n\n// Instantiate a global \"serial-task\" Queue\ncyclops::Queue processQueue;\n\n/* +-------------------------------------------------------------------+\n* |                          Arduino Functions                        |\n * +-------------------------------------------------------------------+\n */\n\nvoid launch();\nvoid runExperiment();\nvoid end();\n\nvoid setup()\n{  \n  Serial.begin(115200);\n  SPI_fifo.begin(SPI_CLOCK_16MHz); // 16MHz SPI clock, using pin 10 as CS\n  pinMode(30, INPUT_PULLUP);\n  pinMode(31, INPUT_PULLUP);\n  pinMode(32, INPUT_PULLUP);\n  pinMode(33, INPUT_PULLUP);\n  cyclops::AquisitionStatus = false;\n}\n",
        "/* +-------------------------------------------------------------------+\n * |                            Main Functions                         |\n * +-------------------------------------------------------------------+\n */\nvoid launch(){\n  Serial.begin(115200);\n  double delta = cyclops::Waveform::initAll();\n  Timer1.initialize(delta);\n  Timer1.attachInterrupt(cyclops::cyclops_timer_isr); // Defined in Waveform_t.h\n}\nvoid end(){\n  Timer1.detachInterrupt();\n  Timer1.stop();\n  // ground all LEDs\n  cyclops::Waveform::groundAll();\n  // reset all sources, even if they are not linked to a Waveform currently\n  cyclops::Source::resetAll();\n}\nvoid runExperiment(){\n  while (cyclops::AquisitionStatus){\n    digitalWrite(14, HIGH);\n    cyclops::Waveform::processAll();\n    digitalWrite(14, LOW);\n    \n    cyclops::readSerialAndPush(&processQueue);\n    if (processQueue.size > 0){\n      cyclops::Task* t = processQueue.peek();\n      t->compute();\n      processQueue.pop();\n    }\n  }\n}\n"
    ],

    "loop": [
        "void loop()\n{\n  if (cyclops::AquisitionStatus == false){\n    // waiting for 'launch' from PC\n    cyclops::readSerialAndPush(&processQueue);\n    if (processQueue.size > 0){\n      cyclops::Task* t = processQueue.peek();\n      t->checkAndCompute();\n      processQueue.pop();\n    }\n  }\n  \n  else{\n    launch();\n    runExperiment();\n    end();\n  }\n}\n"
    ],

    "makefile": [
        "VERBOSITY = 1\nVECHO_0 := @true\nVECHO_1 := @echo\nVECHO := $(VECHO_$(VERBOSITY))\n\nTARGET := $(CURDIR)/",
        "ARDUINOPATH := ",
        "\n# The teensy version to use, 30, 31, or LC\nTEENSY := 31\n\n# Set to 24000000, 48000000, or 96000000 to set CPU core speed\nTEENSY_CORE_SPEED := 96000000\n\n# Some libraries will require this to be defined\n# If you define this, you will break the default main.cpp\nARDUINO := 10611\n\n# configurable options\nOPTIONS := -DUSB_SERIAL -DLAYOUT_US_ENGLISH\n\n# directory to build in\nBUILDDIR := $(CURDIR)/build\n\n#************************************************************************\n# Location of Teensyduino utilities, Toolchain, and Arduino Libraries.\n# To use this makefile without Arduino, copy the resources from these\n# locations and edit the pathnames.  The rest of Arduino is not needed.\n#************************************************************************\n\n# path location for Teensy Loader, teensy_post_compile and teensy_reboot\nTOOLSPATH := $(ARDUINOPATH)/hardware/tools\n\nifeq ($(OS),Windows_NT)\n\t$(error What is Win Dose?)\nelse\n\tUNAME_S = $(shell uname -s)\n\tifeq ($(UNAME_S),Darwin)\n\t\tTOOLSPATH = /Applications/Arduino.app/Contents/Java/hardware/tools/\n\tendif\nendif\n\n# path location for Teensy 3 core\nifeq ($(TEENSY),30)\n\tCOREPATH = $(ARDUINOPATH)/hardware/teensy/avr/cores/teensy\nelse\n\tCOREPATH = $(ARDUINOPATH)/hardware/teensy/avr/cores/teensy3\nendif\n\n# path location for Arduino libraries\nARDUINO_LIB_PATH := /home/ananya/Arduino/libraries\n\n# path location for the arm-none-eabi compiler\nCOMPILERPATH := $(TOOLSPATH)/arm/bin\n\n#************************************************************************\n# Settings below this point usually do not need to be edited\n#************************************************************************\n\n# CPPFLAGS = compiler options for C and C++\nCPPFLAGS := -Wall -g -Os -mthumb -ffunction-sections -fdata-sections -nostdlib -MMD $(OPTIONS) -DTEENSYDUINO=130 -DF_CPU=$(TEENSY_CORE_SPEED) -I$(CURDIR)/src -I$(COREPATH)\n\n# compiler options for C++ only\nCXXFLAGS := -std=gnu++0x -felide-constructors -fno-exceptions -fno-rtti\n\n# compiler options for C only\nCFLAGS :=\n\n# linker options\nLDFLAGS := -Os -Wl,--gc-sections,--defsym=__rtc_localtime=0 --specs=nano.specs -mthumb\n\n# additional libraries to link\nLIBS := -lm\n\n# compiler options specific to teensy version\nifeq ($(TEENSY), 30)\n\tCPPFLAGS += -D__MK20DX128__ -mcpu=cortex-m4\n\tLDSCRIPT = $(COREPATH)/mk20dx128.ld\n\tLDFLAGS += -mcpu=cortex-m4 -T$(LDSCRIPT)\nelse\n\tifeq ($(TEENSY), 31)\n\t\tCPPFLAGS += -D__MK20DX256__ -mcpu=cortex-m4\n\t\tLDSCRIPT = $(COREPATH)/mk20dx256.ld\n\t\tLDFLAGS += -mcpu=cortex-m4 -T$(LDSCRIPT)\n\telse\n\t\tifeq ($(TEENSY), LC)\n\t\t\tCPPFLAGS += -D__MKL26Z64__ -mcpu=cortex-m0plus\n\t\t\tLDSCRIPT = $(COREPATH)/mkl26z64.ld\n\t\t\tLDFLAGS += -mcpu=cortex-m0plus -T$(LDSCRIPT)\n\t\t\tLIBS += -larm_cortexM0l_math\n\t\telse\n\t\t\t$(error Invalid setting for TEENSY)\n\t\tendif\n\tendif\nendif\n\n# set arduino define if given\nifdef ARDUINO\n\tCPPFLAGS += -DARDUINO=$(ARDUINO)\nelse\n\tCPPFLAGS += -DUSING_MAKEFILE\nendif\n\n# names for the compiler programs\nCC := $(COMPILERPATH)/arm-none-eabi-gcc\nCXX := $(COMPILERPATH)/arm-none-eabi-g++\nOBJCOPY := $(COMPILERPATH)/arm-none-eabi-objcopy\nSIZE := $(COMPILERPATH)/arm-none-eabi-size\n\n# automatically create lists of the sources and objects\nLC_FILES := $(wildcard $(ARDUINO_LIB_PATH)/*/*.c)\nLCPP_FILES := $(wildcard $(ARDUINO_LIB_PATH)/*/*.cpp)\nTC_FILES := $(wildcard $(COREPATH)/*.c)\nTCPP_FILES := $(wildcard $(COREPATH)/*.cpp)\nC_FILES := $(wildcard $(CURDIR)/src/*.c)\nCPP_FILES := $(wildcard $(CURDIR)/src/*.cpp)\nINO_FILES := $(wildcard $(CURDIR)/src/*.ino)\n\n# include paths for libraries\nL_INC := $(foreach lib,$(filter %/, $(wildcard $(ARDUINO_LIB_PATH)/*/)), -I$(lib))\n\nCL_SOURCES := $(C_FILES:.c=.o) $(CPP_FILES:.cpp=.o) $(INO_FILES:.ino=.o)\nCORE_SOURCES := $(TC_FILES:.c=.o) $(TCPP_FILES:.cpp=.o)\nLIB_SOURCES := $(LC_FILES:.c=.o) $(LCPP_FILES:.cpp=.o)\n\nCL_OBJS := $(foreach src,$(CL_SOURCES), $(BUILDDIR)/$(src))\nCORE_OBJS := $(foreach src,$(CORE_SOURCES), $(BUILDDIR)/$(src))\nLIB_OBJS := $(foreach src,$(LIB_SOURCES), $(BUILDDIR)/$(src))\n\nall: hex\n\nbuild: $(TARGET).elf\n\nhex: $(TARGET).hex\n\npost_compile: $(TARGET).hex\n\t@$(TOOLSPATH)/teensy_post_compile -file=\"$(basename $(notdir $<))\" -path=$(CURDIR) -tools=\"$(TOOLSPATH)\"\n\nreboot:\n\t-@$(TOOLSPATH)/teensy_reboot\n\nupload: post_compile reboot\n\n$(BUILDDIR)/%.o: %.c\n\t$(VECHO) \"[CC]\\t$<\"\n\t@mkdir -p \"$(dir $@)\"\n\t@$(CC) $(CPPFLAGS) $(CFLAGS) $(L_INC) -o \"$@\" -c \"$<\"\n\n$(BUILDDIR)/%.o: %.cpp\n\t$(VECHO) \"[CXX]\\t$<\"\n\t@mkdir -p \"$(dir $@)\"\n\t@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o \"$@\" -c \"$<\"\n\n$(BUILDDIR)/%.o: %.ino\n\t$(VECHO) \"[CXX]\\t$<\"\n\t@mkdir -p \"$(dir $@)\"\n\t@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o \"$@\" -x c++ -include Arduino.h -c \"$<\"\n\ncyclops: $(CL_OBJS)\n\t@echo \"cyclops DONE 0\"\n\ncores: $(CORE_OBJS)\n\t@echo \"teensy-$(TEENSY) core DONE 1\"\n\nlibs: $(LIB_OBJS)\n\t@echo \"Arduino & CL libraries DONE 2\"\n\n$(TARGET).elf: cyclops cores libs $(LDSCRIPT)\n\t$(VECHO) \"[LD]\\t$@\"\n\t@$(CC) $(LDFLAGS) -o \"$@\" $(OBJS) $(LIBS)\n\n%.hex: %.elf\n\t$(VECHO) \"[HEX]\\t$@\\n\"\n\t@echo \"<SIZE>\"\n\t@$(SIZE) \"$<\"\n\t@$(OBJCOPY) -O ihex -R .eeprom \"$<\" \"$@\"\n\t@echo \"<EZIS>\"\n\t@echo \"HEX DONE 3\"\n\n# compiler generated dependency info\n-include $(OBJS:.o=.d)\n\nclean:\n\t@echo Cleaning...\n\t@rm -rf \"$(BUILDDIR)\"\n\t@rm -f \"$(TARGET).elf\" \"$(TARGET).hex\"\n"
    ]
}
