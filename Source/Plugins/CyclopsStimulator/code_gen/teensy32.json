{
    "sourceHeader": [
        "#ifndef CL_MY_SOURCES_H\n#define CL_MY_SOURCES_H\n//\n// This file contains the globals definitions of the Source objects. Just include\n// this file into your main `.ino` script, and you'll get access to the objects\n// here.\n\n",
        "/* You must register these sources with the library, by:\n *\n * 1. making a globally scoped array of pointers to the objects.\n * 2. assign the global array to the ``globalSourceList_ptr``\n *\n * Only the registered sources are guaranteed to work when using the RPC,\n * especially when using the OE GUI.\n */\n",
        "// Assigning this array to the special pointer.\n",
        "#endif\n"
    ],

    "setup": [
        "#include <Cyclops.h>\n#include \"CLTask.h\"\n#include \"MySources.h\"\n\n// Use the objects you've defined in MySources.h\n\n",
        "/*  \n * #####################################################################\n * #                        DONT EDIT BELOW THIS!                      #\n * #####################################################################\n */\n\n// Instantiate a global \"serial-task\" Queue\ncyclops::Queue processQueue;\n\n/* +-------------------------------------------------------------------+\n * |                          Arduino Functions                        |\n * +-------------------------------------------------------------------+\n */\n\nvoid launch();\nvoid runExperiment();\nvoid end();\n\nvoid setup()\n{  \n  Serial.begin(115200);\n  SPI_fifo.begin(SPI_CLOCK_16MHz); // 16MHz SPI clock, using pin 10 as CS\n  pinMode(30, INPUT_PULLUP);\n  pinMode(31, INPUT_PULLUP);\n  pinMode(32, INPUT_PULLUP);\n  pinMode(33, INPUT_PULLUP);\n  cyclops::AquisitionStatus = false;\n}\n",
        "/* +-------------------------------------------------------------------+\n * |                            Main Functions                         |\n * +-------------------------------------------------------------------+\n */\nvoid launch(){\n  Serial.begin(115200);\n  double delta = cyclops::Waveform::initAll();\n  Timer1.initialize(delta);\n  Timer1.attachInterrupt(cyclops::cyclops_timer_isr); // Defined in Waveform_t.h\n}\nvoid end(){\n  Timer1.detachInterrupt();\n  Timer1.stop();\n  // ground all LEDs\n  cyclops::Waveform::groundAll();\n  // reset all sources, even if they are not linked to a Waveform currently\n  cyclops::Source::resetAll();\n}\nvoid runExperiment(){\n  while (cyclops::AquisitionStatus){\n    digitalWrite(14, HIGH);\n    cyclops::Waveform::processAll();\n    digitalWrite(14, LOW);\n    \n    cyclops::readSerialAndPush(&processQueue);\n    if (processQueue.size > 0){\n      cyclops::Task* t = processQueue.peek();\n      t->compute();\n      processQueue.pop();\n    }\n  }\n}\n"
    ],

    "loop": [
        "void loop()\n{\n  if (cyclops::AquisitionStatus == false){\n    // waiting for 'launch' from PC\n    cyclops::readSerialAndPush(&processQueue);\n    if (processQueue.size > 0){\n      cyclops::Task* t = processQueue.peek();\n      t->checkAndCompute();\n      processQueue.pop();\n    }\n  }\n  \n  else{\n    launch();\n    runExperiment();\n    end();\n  }\n}\n"
    ]
}
